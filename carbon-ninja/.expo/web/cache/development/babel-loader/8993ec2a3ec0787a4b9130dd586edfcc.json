{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useWorker } from '@koale/useworker';\nimport * as React from 'react';\nimport { captureImageData } from \"./WebCameraUtils\";\n\nvar qrWorkerMethod = function qrWorkerMethod(_ref) {\n  var _parsed;\n\n  var data = _ref.data,\n      width = _ref.width,\n      height = _ref.height;\n  var decoded = self.jsQR(data, width, height, {\n    inversionAttempts: 'dontInvert'\n  });\n  var parsed;\n\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (err) {\n    parsed = decoded;\n  }\n\n  if ((_parsed = parsed) != null && _parsed.data) {\n    var nativeEvent = {\n      type: 'qr',\n      data: parsed.data\n    };\n\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [parsed.location.topLeftCorner, parsed.location.bottomLeftCorner, parsed.location.topRightCorner, parsed.location.bottomRightCorner];\n    }\n\n    return nativeEvent;\n  }\n\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    timeout: 5000\n  });\n}\n\nexport function useWebQRScanner(video, _ref2) {\n  var isEnabled = _ref2.isEnabled,\n      captureOptions = _ref2.captureOptions,\n      interval = _ref2.interval,\n      onScanned = _ref2.onScanned,\n      onError = _ref2.onError;\n  var isRunning = React.useRef(false);\n  var timeout = React.useRef(undefined);\n\n  var _useRemoteJsQR = useRemoteJsQR(),\n      _useRemoteJsQR2 = _slicedToArray(_useRemoteJsQR, 2),\n      decode = _useRemoteJsQR2[0],\n      clearWorker = _useRemoteJsQR2[1];\n\n  function scanAsync() {\n    var data, nativeEvent, intervalToUse;\n    return _regeneratorRuntime.async(function scanAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!isRunning.current || !onScanned)) {\n              _context.next = 3;\n              break;\n            }\n\n            stop();\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.prev = 3;\n            data = captureImageData(video.current, captureOptions);\n\n            if (!data) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(decode(data));\n\n          case 8:\n            nativeEvent = _context.sent;\n\n            if (nativeEvent != null && nativeEvent.data) {\n              onScanned({\n                nativeEvent: nativeEvent\n              });\n            }\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n\n            if (onError) {\n              onError({\n                nativeEvent: _context.t0\n              });\n            }\n\n          case 15:\n            _context.prev = 15;\n\n            if (!(interval === 0)) {\n              _context.next = 19;\n              break;\n            }\n\n            stop();\n            return _context.abrupt(\"return\");\n\n          case 19:\n            intervalToUse = !interval || interval < 0 ? 16 : interval;\n            timeout.current = setTimeout(function () {\n              scanAsync();\n            }, intervalToUse);\n            return _context.finish(15);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 12, 15, 22]], Promise);\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(function () {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}","map":{"version":3,"sources":["../src/useWebQRScanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { useWorker } from '@koale/useworker';\nimport * as React from 'react';\n\nimport { CameraPictureOptions } from './Camera';\nimport { BarCodeScanningResult, MountErrorListener } from './Camera.types';\nimport { captureImageData } from './WebCameraUtils';\n\nconst qrWorkerMethod = ({ data, width, height }: ImageData): any => {\n  // eslint-disable-next-line no-undef\n  const decoded = (self as any).jsQR(data, width, height, {\n    inversionAttempts: 'dontInvert',\n  });\n\n  let parsed;\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (err) {\n    parsed = decoded;\n  }\n\n  if (parsed?.data) {\n    const nativeEvent: BarCodeScanningResult = {\n      type: 'qr',\n      data: parsed.data,\n    };\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [\n        parsed.location.topLeftCorner,\n        parsed.location.bottomLeftCorner,\n        parsed.location.topRightCorner,\n        parsed.location.bottomRightCorner,\n      ];\n    }\n    return nativeEvent;\n  }\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    timeout: 5000,\n  });\n}\n\nexport function useWebQRScanner(\n  video: React.MutableRefObject<HTMLVideoElement | null>,\n  {\n    isEnabled,\n    captureOptions,\n    interval,\n    onScanned,\n    onError,\n  }: {\n    isEnabled: boolean;\n    captureOptions: Pick<CameraPictureOptions, 'scale' | 'isImageMirror'>;\n    interval?: number;\n    onScanned?: (scanningResult: { nativeEvent: BarCodeScanningResult }) => void;\n    onError?: MountErrorListener;\n  }\n) {\n  const isRunning = React.useRef<boolean>(false);\n  const timeout = React.useRef<number | undefined>(undefined);\n\n  const [decode, clearWorker] = useRemoteJsQR();\n\n  async function scanAsync() {\n    // If interval is 0 then only scan once.\n    if (!isRunning.current || !onScanned) {\n      stop();\n      return;\n    }\n    try {\n      const data = captureImageData(video.current, captureOptions);\n\n      if (data) {\n        const nativeEvent: BarCodeScanningResult | any = await decode(data);\n        if (nativeEvent?.data) {\n          onScanned({\n            nativeEvent,\n          });\n        }\n      }\n    } catch (error) {\n      if (onError) {\n        onError({ nativeEvent: error });\n      }\n    } finally {\n      // If interval is 0 then only scan once.\n      if (interval === 0) {\n        stop();\n        return;\n      }\n      const intervalToUse = !interval || interval < 0 ? 16 : interval;\n      // @ts-ignore: Type 'Timeout' is not assignable to type 'number'\n      timeout.current = setTimeout(() => {\n        scanAsync();\n      }, intervalToUse);\n    }\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(() => {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n\n  React.useEffect(() => {\n    return () => {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}